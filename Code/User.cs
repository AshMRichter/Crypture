//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Crypture
{
    using System;
    using System.Collections.Generic;
    using System.Security.Cryptography.X509Certificates;
    using System.Security.Principal;

    public partial class User
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public User()
        {
            this.Instances = new HashSet<Instance>();
            this.Items = new HashSet<Item>();
        }
    
        public string Name
        {
            get
            {
                using (X509Certificate2 oCert = new X509Certificate2(Certificate))
                {
                    return oCert.GetNameInfo(X509NameType.SimpleName, false);
                }                    
            }
        }

        public bool IsSelfSigned
        {
            get
            {
                using (X509Certificate2 oCert = new X509Certificate2(Certificate))
                {
                    using (X509Chain oChain = new X509Chain())
                    {
                        // build the chain based on the specified policy
                        oChain.ChainPolicy.RevocationMode = X509RevocationMode.NoCheck;
                        oChain.Build(oCert);

                        // check for self signed
                        if (oChain.ChainElements.Count == 1 &&
                            oChain.ChainStatus[0].Status == X509ChainStatusFlags.UntrustedRoot)
                        {
                            return true;
                        }
                    }
                }

                return false;
            }
        }

        public bool IsOwnedByCurrentUser
        {
            get
            {
                return WindowsIdentity.GetCurrent().User.Value.Equals(Sid);
            }
        }

        public long UserId { get; set; }
        public byte[] Certificate { get; set; }
        public string Sid { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Instance> Instances { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Item> Items { get; set; }
    }
}
